<feed xml:lang='en-US' xmlns='http://www.w3.org/2005/Atom'>
<id>http://thanegill.com/</id>
<title>Thane Gill</title>
<updated>2016-01-01T03:52:16+00:00</updated>
<link href='http://thanegill.com' rel='alternate'>
<author>
<name>Thane Gill</name>
<email>me@thanegill.com</email>
</author>
<entry>
<id>http://thanegill.com/blog/2015/12/22/mutable-class-initilizers-in-swift/</id>
<title>Mutable Class Initializers in Swift</title>
<link href='http://thanegill.com/blog/2015/12/22/mutable-class-initilizers-in-swift/' rel='alternate'>
<updated>2016-01-01T03:50:45+00:00</updated>
<published>2015-12-22T10:40:00+00:00</published>
<author>
<name>Thane Gill</name>
</author>
<content type='html'><![CDATA[<p>How many times have you wanted mutate self in the initializer? Apparently it&rsquo;s
totally possible in swift, just not an enabled feature. It&rsquo;s on Apples
<a href="rdar://23224354">radar</a> and Chris Lattner has acknowledged it:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/thanegill">@thanegill</a> It would have to have the same type as the dynamic Self type, to work w/ derived classes. Enabling this hasn&rsquo;t been a priority.</p>&mdash; Chris Lattner (@clattner_llvm) <a href="https://twitter.com/clattner_llvm/status/657287462876659712">October 22, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Submitting this as a proposal on the Swift evolution mailing list still yet to
be done. Let me know if you&rsquo;d like to help write up a proposal.</p>

<p>As Salva Pestov <a href="https://twitter.com/slava_pestov/status/658058425398464512">pointed
out</a> to me protocol
extensions can mutate self as they are never inherited. This this is now
possible, though a bit ugly:</p>
<pre class="highlight swift"><code><span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">MutateSelf</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">extension</span> <span class="kt">MutateSelf</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="nf">init</span><span class="p">(</span><span class="n">mutateSelfAs</span> <span class="nv">object</span><span class="p">:</span> <span class="k">Self</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span> <span class="o">=</span> <span class="n">object</span>
    <span class="p">}</span>

    <span class="c1">// Failable initializer, useful for objects that conform to RawRepresetable</span>
    <span class="kd">public</span> <span class="nf">init</span><span class="p">?(</span><span class="n">mutateSelfAs</span> <span class="nv">object</span><span class="p">:</span> <span class="k">Self</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">object</span> <span class="o">=</span> <span class="n">object</span> <span class="p">{</span>
            <span class="k">self</span> <span class="o">=</span> <span class="n">object</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre>

<p>This leads to cool uses that make UIKit more swifty:</p>
<pre class="highlight swift"><code><span class="c1">// Extending NSObject becasue AnyObject cannot be extended</span>
<span class="kd">extension</span> <span class="kt">NSObject</span><span class="p">:</span> <span class="kt">MutateSelf</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="n">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="n">fromStoryboard</span> <span class="nv">storyboard</span><span class="p">:</span> <span class="kt">UIStoryboard</span><span class="p">,</span> <span class="n">storyboardID</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">mutateSelfAs</span><span class="p">:</span> <span class="n">storyboard</span><span class="o">.</span><span class="nf">instantiateViewControllerWithIdentifier</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">SomeViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">object</span><span class="p">:</span> <span class="kt">SomeObject</span>

    <span class="n">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="n">fromStoryboard</span> <span class="nv">storyboard</span><span class="p">:</span> <span class="kt">UIStoryboard</span><span class="p">,</span> <span class="nv">object</span><span class="p">:</span> <span class="kt">SomeObject</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">fromStoryboard</span><span class="p">:</span> <span class="n">storyboard</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">object</span> <span class="o">=</span> <span class="n">object</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">methodThatShowsAView</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">newViewController</span> <span class="o">=</span> <span class="kt">NewViewController</span><span class="p">(</span><span class="nv">fromStoryboard</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">storyboard</span><span class="o">!</span><span class="p">,</span> <span class="nv">object</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">object</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">navigationController</span><span class="p">?</span><span class="o">.</span><span class="nf">pushViewController</span><span class="p">(</span><span class="n">newViewController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre>

<p>This also fixes my displease with dependency injection and removes the need for
forced unwrapped optionals! ðŸŽ‰ You can now just initialize your new VC passing it
the current storyboard and push to it with your navigation controller. Much
simpler and easier to read!</p>
]]></content>
</entry>
</feed>
